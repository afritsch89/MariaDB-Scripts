Daily Tasks

Monitor Database Health: Check the overall health and performance of the MariaDB database. Monitor key metrics such as CPU usage, memory utilization, disk space, and network activity. Use tools like top, htop, or monitoring software to gather this information.
Check Error Logs: Review the MariaDB error logs for any issues or warnings. Look for any error messages related to database connectivity, queries, or performance problems. Address any critical errors immediately and investigate any warning messages.
Backup Databases: Regularly perform backups of the MariaDB databases to ensure data protection. Use tools like mysqldump or database backup utilities to create backups and store them in a secure location. Verify that the backup process completed successfully.
Optimize Database Performance: Analyze database performance using tools like the EXPLAIN statement to identify slow or inefficient queries. Optimize query execution plans, add appropriate indexes, and fine-tune MariaDB configuration parameters to improve overall performance.
Monitor and Manage Security: Stay vigilant about database security. Review access controls and user permissions regularly. Monitor user activities, identify any suspicious behavior, and take appropriate actions to protect the database from unauthorized access or malicious activities.
Monitor Replication: If you have a MariaDB replication setup, monitor its status and ensure that replication is working correctly. Check the replication logs for any errors or delays and address them promptly.
Perform Routine Maintenance: Perform routine maintenance tasks, such as purging old data, optimizing table structures, and rebuilding indexes. Regularly update database statistics to help the query optimizer make accurate decisions.
Review and Apply MariaDB Updates: Stay up to date with the latest releases and security patches for MariaDB. Review release notes and apply necessary updates to keep the database software secure and benefit from bug fixes and performance improvements.
Monitor and Manage Storage: Keep an eye on the disk space utilization of the MariaDB server. Ensure that there is sufficient free space available for ongoing operations. Monitor disk I/O performance and consider optimizing storage configurations if necessary.
Document and Maintain Procedures: Maintain documentation for database administration tasks, including backup and recovery procedures, configuration settings, and troubleshooting guides. Update the documentation regularly to reflect any changes or improvements made to the database environment.
Remember, the specific tasks may vary based on your organization's requirements and the complexity of your MariaDB setup. Adapt this list to suit your specific needs and priorities.



MariaDB Error Log:
Location: By default, the error log is usually located at /var/log/mariadb/mariadb.log or /var/log/mysql/error.log, but it may vary depending on your system configuration. What to look for: Look for any error messages or warnings related to MariaDB startup, shutdown, failed queries, authentication issues, or other critical errors. Pay attention to error codes and descriptions, as they can provide valuable information about the nature of the problem. Slow Query Log:
Location: The slow query log is often disabled by default. To enable it, edit the MariaDB configuration file (my.cnf or mariadb.conf.d) and uncomment the relevant lines or add the necessary configuration. By default, the slow query log is located at /var/log/mariadb/mariadb-slow.log. What to look for: Check for queries that exceed the configured threshold (e.g., long_query_time) in the slow query log. Analyze the slow queries to identify potential performance bottlenecks, inefficient queries, missing indexes, or problematic SQL statements. General Query Log:
Location: The general query log is also disabled by default due to its impact on performance. To enable it, edit the MariaDB configuration file and uncomment or add the necessary lines. By default, the general query log is located at /var/log/mariadb/mariadb.log. What to look for: The general query log logs all queries sent to the MariaDB server, which can be useful for debugging specific issues or tracking user activities. However, keep in mind that enabling the general query log in a production environment can significantly impact performance. InnoDB Error Log:
Location: The InnoDB error log, specifically for the InnoDB storage engine, is usually part of the MariaDB error log. Refer to the MariaDB error log location mentioned in point 1. What to look for: Look for any errors or warnings specific to InnoDB, such as database corruption, transaction failures, or storage-related issues. InnoDB-related errors often provide valuable insights into underlying problems. Binary Log:
Location: The binary log files are located in the MariaDB data directory, typically in /var/lib/mysql/ or a custom location defined in the MariaDB configuration. What to look for: The binary log files contain a record of changes to the database, including write operations. They are crucial for replication and point-in-time recovery. Analyze the binary logs to investigate specific events, track changes, or troubleshoot replication issues. System Logs:
Location: Check the system logs (e.g., /var/log/syslog or /var/log/messages) for any indications of system-level issues that might impact MariaDB's performance or stability. Look for disk I/O errors, out-of-memory errors, or other relevant system events. Remember, this is a general troubleshooting guide, and the specific logs and locations may vary depending on your system configuration. Always consult your system administrator or refer to MariaDB documentation for detailed information on log locations and configuration options.

Upgrade MariaDB 10.4.x using locally stored .rpm packages

Step 1: Backup and setup
Backup your MariaDB databases: Before performing any upgrade, it's essential to create backups of your MariaDB databases. This ensures you have a fallback option in case anything goes wrong during the upgrade process.
Download the new version: Obtain the new version of MariaDB 10.4.x from the official MariaDB website or from a trusted source. Make sure to download the appropriate .rpm packages for your system architecture and operating system.
Transfer the .rpm files: Copy or transfer the downloaded .rpm packages to the server where MariaDB is installed. You can use tools like SCP (Secure Copy) or any other method you prefer to transfer the files.
Step 2: Starting the upgrade
Stop the MariaDB service: To ensure a smooth upgrade process, stop the MariaDB service to prevent any potential conflicts or issues. Execute the following command with root privileges:
sudo systemctl stop mariadb
Remove existing MariaDB packages: Before installing the new version, it's necessary to remove the existing MariaDB packages. Run the following commands to uninstall the existing packages:
rpm -qa | grep -i <pkgname>  #located installed package
rpm -e [package name] # remove each package

Install the new MariaDB packages: Install the new version of MariaDB using the locally stored .rpm packages. Execute the following command to install the .rpm files:
rpm -ivh /path/to/package1.rpm /path/to/package2.rpm ...
Replace /path/to/package1.rpm /path/to/package2.rpm with the actual paths to the .rpm files you transferred to the server.
You can install all in the same command or separately.
Start the MariaDB service: After the installation is complete, start the MariaDB service to activate the upgraded version. Run the following command:
sudo systemctl start mariadb
Upgrade the MariaDB databases: MariaDB provides a utility called mysql_upgrade to upgrade the databases to the new version. Execute the following command to perform the upgrade:
sudo mysql_upgrade -u=[MariadbAdminUser]
This command ensures that the databases are compatible with the new MariaDB version.
Verify the upgrade: Once the upgrade process and database upgrade are complete, you can verify the new MariaDB version by running the following command:
mariadb --version
The output should display the upgraded version of MariaDB.
Congratulations! You have successfully upgraded MariaDB 10.4.x using locally stored .rpm packages. Remember to test your applications or services to ensure they function correctly with the upgraded database version.







Useful Scripts


-- CTRL H AND REPLACE [YOUR_MARIA_USERNAME] WITH YOUR USERNAME
--create a root account
mariadb -u[YOUR_MARIA_USERNAME] -e "CREATE USER '[new_root_user]'@localhost IDENTIFIED VIA unix_socket;"
mariadb -u[YOUR_MARIA_USERNAME] -e "GRANT ALL ON *.* TO ‘[new_root_user]’@localhost IDENTIFIED VIA unix_socket WITH GRANT OPTION;"

-- display scripts to remove any root user
select concat('drop user ', user, '@', host, ';') from mysql.user where user like '%root%';

-- create mariabackup account
mariadb -u[YOUR_MARIA_USERNAME] -e "CREATE USER 'mariabackup'@localhost IDENTIFIED by 'Delicacy7-Dipping-Bronco';"
mariadb -u[YOUR_MARIA_USERNAME] -e "GRANT reload, process, lock tables, select, show view, replication client ON *.* TO 'mariabackup'@localhost IDENTIFIED by 'Delicacy7-Dipping-Bronco';"

--check server audit
mariadb -u[YOUR_MARIA_USERNAME] -e "show global variables like '%server_audit%';"
--You should see several variables associated with the audit

--set audit (if not in the .cnf, but will not persist reboot)
INSTALL SONAME 'server_audit';
SET GLOBAL server_audit_file_path='mariadb-audit.log';
SET GLOBAL server_audit_events='connect,query,table';
SET GLOBAL server_audit_file_rotate_size=1000000;
SET GLOBAL server_audit_file_rotations=10;
SET GLOBAL server_audit_logging=ON;

-- CNF setup
sudo /bin/vim /etc/my.cnf



--Show process list
mysqladmin -u [username] -p processlist

save this as “.status” in your home directory:
--------------------------------------------------------------------------------------------------------------------------------------

#!/bin/bash

# Display current system time
echo "Current system time: $(date)"

# Check if mariadb service is running
echo "###MARIA STATUS###"
if systemctl is-active --quiet mariadb; then
  echo "mariadb service is RUNNING"
else
  echo "mariadb service is NOT RUNNING"
fi
#Maria Status
mariadb-admin version
mariadb-admin status
echo "##################"
echo " "

#List Aliases -- if you add your own add them here
echo "Aliases Available: mariaStart, mariaStop,  mariaCron, cronLog, mariaCNF, backupLog"
--------------------------------------------------------------------------------------------------------------------------------------

Then add this to the bottom of your .bashrc:

--------------------------------------------------------------------------------------------------------------------------------------
# User specific aliases and functions
alias mariaCron='sudo vim /etc/cron.d/mariadb_backup'
alias cronLog='sudo /bin/tail -f /var/log/cron'
alias mariaCNF='sudo /bin/vim /etc/my.cnf’
alias mariaStop='sudo /usr/bin/systemctl stop mariadb'
alias mariaStart='sudo /usr/bin/systemctl start mariadb'
alias cls='clear && /home/[PUT_YOUR_USER_NAME_HERE]/.status'


-------------------------------------------------

list 5 largest tables:

select table_schema as database_name,
       table_name,
       round( (data_length + index_length) / 1024 / 1024, 2)  as total_size,
       round( (data_length) / 1024 / 1024, 2)  as data_size,
       round( (index_length) / 1024 / 1024, 2)  as index_size
from information_schema.tables
where table_schema not in ('information_schema', 'mysql',
                           'performance_schema' ,'sys')
      and table_type = 'BASE TABLE'
      -- and table_schema = 'your database name'
order by total_size desc
limit 15;




--cpu time
select thread_id, PROCESSLIST_USER, PROCESSLIST_HOST, PROCESSLIST_DB, PROCESSLIST_COMMAND, PROCESSLIST_TIME
from threads
order by PROCESSLIST_TIME desc;

-- memory
show status like 'innodb_buffer%';


--IO
select event_name, count_read, sum_number_of_bytes_read, count_write, sum_number_of_bytes_write
from file_summary_by_event_name;






# Set timestamp format
timestamp=$(date +"%Y-%m-%d %H:%M:%S")

# Connect to MariaDB and run queries
echo "=======================" >> performance.log
echo "== Query Performance ==" >> performance.log
echo "=======================" >> performance.log
echo "Timestamp: $timestamp" >> performance.log
mysql -u fritscha -e "

SELECT digest_text, SUM(count_star) as total_executions, SUM(sum_timer_wait) as total_execution_time, 
AVG(sum_timer_wait) as avg_execution_time 
FROM performance_schema.events_statements_summary_by_digest 
WHERE digest_text IS NOT NULL GROUP BY digest_text ORDER BY total_execution_time DESC;


" >> performance.log

echo "====================" >> performance.log
echo "== Resource Usage ==" >> performance.log
echo "====================" >> performance.log
echo "Timestamp: $timestamp" >> performance.log
mysql -u fritscha -e "
SELECT Count_star, SUM_TIMER_WAIT as total_cpu_time 
FROM performance_schema.events_stages_summary_global_by_event_name 
WHERE event_name LIKE 'stage/sql/%' GROUP BY stage;" >> performance.log

echo "==========================" >> performance.log
echo "== Locking and Blocking ==" >> performance.log
echo "==========================" >> performance.log
echo "Timestamp: $timestamp" >> performance.log
mysql -u fritscha -e "
SELECT table_name, COUNT(*) as num_waits, SUM(timer_wait) as total_wait_time 
FROM performance_schema.table_lock_waits_summary_by_table 
GROUP BY table_name ORDER BY total_wait_time DESC;" >> performance.log


SELECT table_schema "DATABASENAME",
ROUND(SUM(data_length + index_length) / 1024 / 1024 / 1024, 1) "DB Size in MB"
FROM information_schema.tables
GROUP BY table_schema;



-- quickSetup

--quick root logins
--mariadb -uroot -pDelicacy7-Dipping-Bronco
--mariadb -uroot -pDATA_k33p3r_CHRA

--create MY root account
mariadb -uroot -pDelicacy7-Dipping-Bronco -e "CREATE USER 'fritscha'@localhost IDENTIFIED VIA unix_socket;"
mariadb -uroot -pDelicacy7-Dipping-Bronco -e "GRANT ALL ON *.* TO 'fritscha'@localhost IDENTIFIED VIA unix_socket WITH GRANT OPTION;"


--drop root
select concat('drop user ', user, '@', host, ';') from mysql.user where user like '%root%';
drop user 'root'@'127.0.0.1';
drop user 'root'@'::1';
drop user 'root'@'localhost';


--check users
mariadb -ufritscha -e "select user from mysql.user;"
mariadb -ufritscha -e "show create user 'mariabackup';"
--create users
mariadb -ufritscha -e "CREATE USER 'turnerk'@localhost IDENTIFIED VIA unix_socket;"
mariadb -ufritscha -e "GRANT ALL ON *.* TO 'turnerk'@localhost IDENTIFIED VIA unix_socket;"
mariadb -ufritscha -e "CREATE USER 'swalker'@localhost IDENTIFIED VIA unix_socket;"
mariadb -ufritscha -e "GRANT ALL ON *.* TO 'swalker'@localhost IDENTIFIED VIA unix_socket;"

-- mariabackup account
mariadb -ufritscha -e "CREATE USER 'mariabackup'@localhost IDENTIFIED by 'Delicacy7-Dipping-Bronco';"
mariadb -ufritscha -e "GRANT reload, process, lock tables, select, show view, replication client ON *.* TO 'mariabackup'@localhost IDENTIFIED by 'Delicacy7-Dipping-Bronco';"

--check server audit
mariadb -ufritscha -e "show global variables like '%server_audit%';"


-set audit
INSTALL SONAME 'server_audit';
SET GLOBAL server_audit_file_path='mariadb-audit.log';
SET GLOBAL server_audit_events='connect,query,table';
SET GLOBAL server_audit_file_rotate_size=1000000;
SET GLOBAL server_audit_file_rotations=10;
SET GLOBAL server_audit_logging=ON;



-- CNF setup
sudo /bin/vim /etc/my.cnf.d/server.cnf

####audit_log Settings####
plugin_load_add = server_audit # load plugin
server_audit=FORCE_PLUS_PERMANENT  # do not allow users to uninstall plugin
server_audit_file_path=mariadb-audit.log # path to the audit log, defaults to data dir which is protected by SElinux config
server_audit_events=connect,query #<-- STIG compliant Logging
server_audit_file_rotate_size=1000000 # in bytes
server_audit_file_rotations=10 # "days" of logs, we fill them up quickly though, but this should hold the 2 hour minimum no problem
server_audit_logging=ON  # enable audit logging
#####end audit_log Settings####


-- select user

SELECT
concat(user, '@', host) as user
, max_connections
, max_user_connections
, plugin
, authentication_string
, password_expired 
FROM mysql.user;



-- max conections
--Check
 SELECT count(id) from information_schema.processlist where user like '%servicenow@10.0.4.94%';

select concat('GRANT USAGE ON *.* TO  ', user, '@', host,'  WITH MAX_USER_CONNECTIONS 500;') from mysql.user;











SELECT
ssl_type
, ssl_cipher
, x509_issuer
, x509_subject
, max_questions
, max_updates
, max_connections
, max_user_connections
, plugin
, authentication_string
, password_expired 
FROM mysql.user;

-- User Permissions
SELECT
Host
, User
, Select_priv
, Insert_priv
, Update_priv
, Delete_priv
, Create_priv
, Drop_priv
, Reload_priv
, Shutdown_priv
, Process_priv
, File_priv
, Grant_priv
, References_priv
, Index_priv
, Alter_priv
, Show_db_priv
, Super_priv
, Create_tmp_table_priv
, Lock_tables_priv, Execute_priv
, Repl_slave_priv
, Repl_client_priv
, Create_view_priv
, Show_view_priv
, Create_routine_priv
, Alter_routine_priv
, Create_user_priv
, Event_priv
, Trigger_priv
, Create_tablespace_priv
, Delete_history_priv
FROM mysql.user;
